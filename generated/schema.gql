# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createByUserId: ID
  updateByUserId: ID
  deleteByUserId: ID
  name: String!
  slugs: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Media {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createByUserId: ID
  updateByUserId: ID
  deleteByUserId: ID
  mimetype: Mimetype!
  originalFileName: String!
  size: Int!
  description: String
  cloudUrl: String!
}

enum Mimetype {
  Png
  Jpeg
  Jpg
  Webp
  Mp4
}

type ProductType {
  name: String!
  thumbnailMedia: Media!
  availableQuantity: Int!
  originalPrice: Float!
  salePrice: Float
  saleTo: DateTime
}

type Product {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createByUserId: ID
  updateByUserId: ID
  deleteByUserId: ID
  name: String!
  description: String!
  tags: String
  slugs: String!
  originalPrice: Float!
  salePrice: Float
  saleTo: DateTime
  availableQuantity: Int!
  totalSold: Int!
  categories: [Category!]
  thumbnailMedia: Media!
  displayMedias: [Media!]
  types: [ProductType!]
  maxSupportedShippingCost: Float
  likeByUserIds: [ID!]
  seller: User
}

type User {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createByUserId: ID
  updateByUserId: ID
  deleteByUserId: ID
  fullName: String!
  username: String
  email: String
  phoneNumber: String!
  actualRole: ActualRole!
  status: UserStatus!
  profileImage: Media
  coverImage: Media
  followerIds: [ID!]
  followingIds: [ID!]
  textSearchingHistory: [String!]
  locale: Locale!
  address: String
  favoriteCategories: [Category!]
}

enum ActualRole {
  Customer
  Seller
  Transporter
}

enum UserStatus {
  Active
  Disabled
}

enum Locale {
  Vietnamese
  EnglishUS
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type PaginatedProduct {
  totalItems: Int!
  pageInfo: PageInfo!
  items: [Product!]!
}

type ShopeeSetting {
  maxDeviceLogin: Int!
  maxDistinctProductOnOrder: Int!

  """Max product uploaded media size in MB"""
  maxProductUploadedMediaSize: Int!

  """Max uploaded display media quantity for 1 product"""
  maxProductUploadedDisplayMediaQuantity: Int!
  maxShippingAddress: Int!

  """Max time in day to process an PROCESSING order"""
  maxOrderCreatedPendingTime: Int!
}

type JWT {
  token: String!
  expiresAt: DateTime!
  type: JWTType!
}

enum JWTType {
  AccessToken
  RefreshToken
}

type AuthData {
  accessToken: JWT!
  refreshToken: JWT!
}

"""It's necessary for client's message highlight"""
type NotificationHighlight {
  locale: Locale!
  offset: Int!
  length: Int!
}

type NotificationMessage {
  locale: Locale!
  content: String!
}

type Notification {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createByUserId: ID
  updateByUserId: ID
  deleteByUserId: ID
  type: NotificationType!
  messages: [NotificationMessage!]!
  highlights: [NotificationHighlight!]
  specificReceiverId: ID
  wasReadBySpecificReceiver: Boolean
  receiverIds: ID
  wasReadByReceiverIds: [ID!]
  sendType: NotificationSendType!
}

enum NotificationType {
  OrderCreated
}

enum NotificationSendType {
  ForAll
  ForSpecificReceiver
  ForReceivers
}

type PaginatedNotification {
  totalItems: Int!
  pageInfo: PageInfo!
  items: [Notification!]!
}

type Address {
  provinceId: String!
  districtId: String!
  wardId: String!
  detail: String!
  full: String!
}

type Transporter {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createByUserId: ID
  updateByUserId: ID
  deleteByUserId: ID
  fullName: String!
  username: String
  email: String
  phoneNumber: String!
  actualRole: ActualRole!
  status: UserStatus!
  profileImage: Media
  coverImage: Media
  followerIds: [ID!]
  followingIds: [ID!]
  textSearchingHistory: [String!]
  locale: Locale!
  address: String
  favoriteCategories: [Category!]
}

type OrderDetail {
  product: Product!
  type: String
  quantity: Int!
}

type Order {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createByUserId: ID
  updateByUserId: ID
  deleteByUserId: ID
  details: [OrderDetail!]!
  shippingAddress: Address!
  totalCost: Float!
  status: OrderStatus!
  transporter: Transporter
}

enum OrderStatus {
  Processing
  Cancelled
  Shipping
  Done
}

type Feedback {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createByUserId: ID
  updateByUserId: ID
  deleteByUserId: ID
  productId: ID!
  rateStar: Int!
  content: String!
  orderId: ID!
  descriptionMedias: [Media!]
}

type Query {
  me: User!
  getAccessToken(refreshToken: String!): JWT!
  category(id: String!): Category!
  categories: [Category!]!
  getMyProducts(input: QueryProductInput!): PaginatedProduct!
  getProductDetail(id: String!): Product!
  getMyOrders: [Order!]!
  getMyNotifications(input: QueryNotificationInput!): PaginatedNotification!
  getShopeeSetting: ShopeeSetting!
}

input QueryProductInput {
  option: QueryOption!
  filter: FilterProductInput!
}

input QueryOption {
  limit: Int! = 20
  offset: Int! = 0
}

input FilterProductInput {
  id_equal: ID
  id_notEqual: ID
  id_in: [ID!]
  id_notIn: [ID!]
  createByUserId_equal: ID
  createByUserId_notEqual: ID
  createByUserId_in: [ID!]
  createByUserId_notIn: [ID!]
  createdAt_equal: DateTime
  createdAt_notEqual: DateTime
  createdAt_greaterThan: DateTime
  createdAt_greaterThanOrEqual: DateTime
  createdAt_lessThan: DateTime
  createdAt_lessThanOrEqual: DateTime
  updatedAt_equal: DateTime
  updatedAt_notEqual: DateTime
  updatedAt_greaterThan: DateTime
  updatedAt_greaterThanOrEqual: DateTime
  updatedAt_lessThan: DateTime
  updatedAt_lessThanOrEqual: DateTime
  deletedAt_equal: DateTime
  deletedAt_notEqual: DateTime
  deletedAt_greaterThan: DateTime
  deletedAt_greaterThanOrEqual: DateTime
  deletedAt_lessThan: DateTime
  deletedAt_lessThanOrEqual: DateTime
}

input QueryNotificationInput {
  option: QueryNotificationOption!
  filter: FilterNotificationInput!
}

input QueryNotificationOption {
  limit: Int!
  offset: Int! = 0
}

input FilterNotificationInput {
  readNotificationType: ReadNotificationType! = All
}

enum ReadNotificationType {
  WasRead
  WasNotRead
  All
}

type Mutation {
  createRegisterRequest(input: CreateRegisterRequest!): Boolean!
  register(input: RegisterInput!): AuthData!
  login(input: LoginInput!): AuthData!
  createLoginOTP(input: CreateLoginOTPInput!): Boolean!
  loginWithOTP(input: LoginWithOTPInput!): AuthData!
  createResetPasswordRequest(input: CreateResetPasswordRequestInput!): Boolean!
  resetPassword(input: ResetPasswordInput!): Boolean!
  changePassword(input: ChangePasswordInput!): Boolean!
  logoutAllDevice: Boolean!
  createCategory(input: CreateCategoryInput!): Category!
  updateCategory(input: UpdateCategoryInput!): Boolean!
  updateMyFavoriteCategories(input: UpdateFavoriteCategoriesInput!): Boolean!
  followUser(userId: String!): Boolean!
  unFollowUser(userId: String!): Boolean!
  createProduct(input: CreateProductInput!): Product!
  updateProduct(input: UpdateProductInput!): Boolean!
  likeProduct(productId: String!): Boolean!
  unlikeProduct(productId: String!): Boolean!
  createOrder(input: CreateOrderInput!): Order!
  markWasReadNotification(id: String!): Boolean!
  markWasReadAllNotification: Boolean!
  updateShopeeSetting(input: UpdateShopeeSettingInput!): Boolean!
  createFeedback(input: CreateFeedbackInput!): Feedback!
}

input CreateRegisterRequest {
  phoneNumber: String!
}

input RegisterInput {
  fullName: String!
  phoneNumber: String!
  password: String!
  otp: String!
  actualRole: ActualRole! = Customer
  locale: Locale! = Vietnamese
}

input LoginInput {
  """It can be email, username or phone number"""
  username: String!
  password: String!
}

input CreateLoginOTPInput {
  phoneNumber: String!
}

input LoginWithOTPInput {
  phoneNumber: String!
  otp: String!
}

input CreateResetPasswordRequestInput {
  phoneNumber: String!
}

input ResetPasswordInput {
  phoneNumber: String!
  otp: String!
  newPassword: String!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  id: ID!
  name: String!
}

input UpdateFavoriteCategoriesInput {
  categoryIds: [ID!]!
}

input CreateProductInput {
  name: String!
  description: String!
  tags: [String!]
  originalPrice: Float!
  salePrice: Float
  saleTo: DateTime
  availableQuantity: Int!
  categoryIds: [ID!]
  thumbnailMediaId: ID!
  displayMediaIds: [String!]
  types: [ProductTypeInput!]
  maxSupportedShippingCost: Float
}

input ProductTypeInput {
  name: String!
  availableQuantity: Float!
  thumbnailMediaId: ID!
  originalPrice: Float
  salePrice: Float
  saleTo: DateTime
}

input UpdateProductInput {
  name: String
  description: String
  tags: [String!]
  originalPrice: Float
  salePrice: Float
  saleTo: DateTime
  availableQuantity: Int
  categoryIds: [ID!]
  displayMediaIds: [String!]
  types: [ProductTypeInput!]
  maxSupportedShippingCost: Float
  id: ID!
}

input CreateOrderInput {
  details: [OrderDetailInput!]!
  shippingAddressInput: AddressInput!
}

input OrderDetailInput {
  productId: String!
  type: String
  quantity: Int! = 1
}

input AddressInput {
  provinceId: String!
  districtId: String!
  wardId: String!
  detail: String!
}

input UpdateShopeeSettingInput {
  maxDeviceLogin: Int
  maxDistinctProductOnOrder: Int
  maxProductUploadedMediaSize: Int
  maxProductUploadedDisplayMediaQuantity: Int
}

input CreateFeedbackInput {
  productId: ID!
  orderId: ID!
  rateStar: Int!
  content: String!
  descriptionMediaIds: [ID!]
}

type Subscription {
  subOrderCreated: Notification!
}